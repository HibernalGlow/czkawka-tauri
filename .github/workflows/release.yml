name: release

permissions:
  contents: write

on:
  push:
    tags:
      - "[0-9]+.*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  release:
    runs-on: ${{ matrix.os }}
    name: release (${{ matrix.os }})

    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || '' }}

      # ============ macOS 构建步骤 ============
      - name: download ffmpeg and ffprobe
        if: matrix.os == 'macos-latest'
        run: |
          mkdir ./tauri/ffmpeg
          curl -L -o ffmpeg.zip "https://evermeet.cx/ffmpeg/getrelease/zip"
          unzip ffmpeg.zip -d ./tauri/ffmpeg
          chmod +x ./tauri/ffmpeg/ffmpeg
          ./tauri/ffmpeg/ffmpeg -version
          curl -L -o ffprobe.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip"
          unzip ffprobe.zip -d ./tauri/ffmpeg
          chmod +x ./tauri/ffmpeg/ffprobe
          ./tauri/ffmpeg/ffprobe -version

      - name: macos bundles
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          npm i pnpm -g
          pnpm i
          node --run build:ui
          node --run build:tauri:ffmpeg
          mkdir ./target/ffmpeg-dmg
          mv ./target/universal-apple-darwin/release/bundle/dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal.dmg ./target/ffmpeg-dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal_ffmpeg.dmg
          node --run build:tauri

      - uses: softprops/action-gh-release@v2
        if: matrix.os == 'macos-latest'
        with:
          draft: true
          files: |
            ./target/universal-apple-darwin/release/bundle/dmg/*.dmg
            ./target/ffmpeg-dmg/*.dmg

      # ============ Windows 构建步骤（完整配置 dav1d） ============
      - name: setup vcpkg cache
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v4
        with:
          path: |
            C:\vcpkg\installed
            C:\vcpkg\packages
          key: ${{ runner.os }}-vcpkg-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-

      - name: install vcpkg and dav1d
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 检查是否已安装 vcpkg
          if (!(Test-Path "C:\vcpkg")) {
            Write-Host "Installing vcpkg..."
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            C:\vcpkg\bootstrap-vcpkg.bat
          } else {
            Write-Host "vcpkg already installed, updating..."
            cd C:\vcpkg
            git pull
            .\bootstrap-vcpkg.bat
          }
          
          # 安装 dav1d
          Write-Host "Installing dav1d..."
          C:\vcpkg\vcpkg.exe install dav1d:x64-windows
          
          # 安装 pkg-config
          C:\vcpkg\vcpkg.exe install pkgconf:x64-windows
          
          # 验证安装
          Write-Host "Verifying installation..."
          if (Test-Path "C:\vcpkg\installed\x64-windows\lib\pkgconfig\dav1d.pc") {
            Write-Host "✓ dav1d.pc found"
            Get-Content "C:\vcpkg\installed\x64-windows\lib\pkgconfig\dav1d.pc" | Select-Object -First 10
          } else {
            Write-Error "dav1d.pc not found!"
            exit 1
          }

      - name: configure build environment
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          # 设置环境变量到 GitHub Actions 环境
          $PkgCfgPath = "C:\vcpkg\installed\x64-windows\lib\pkgconfig"
          $PkgCfgDebugPath = "C:\vcpkg\installed\x64-windows\debug\lib\pkgconfig"
          $VcpkgRoot = "C:\vcpkg"
          
          # 添加到 PATH
          $env:PATH = "C:\vcpkg\installed\x64-windows\bin;C:\vcpkg\installed\x64-windows\tools\pkgconf;$env:PATH"
          echo "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 设置 PKG_CONFIG_PATH
          $PkgConfigPath = "$PkgCfgPath;$PkgCfgDebugPath"
          echo "PKG_CONFIG_PATH=$PkgConfigPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          # 设置其他环境变量
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "VCPKG_ROOT=$VcpkgRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          Write-Host "Environment configured:"
          Write-Host "PKG_CONFIG_PATH=$PkgConfigPath"
          Write-Host "VCPKG_ROOT=$VcpkgRoot"

      - name: verify pkg-config
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $env:PKG_CONFIG_PATH = "C:\vcpkg\installed\x64-windows\lib\pkgconfig;C:\vcpkg\installed\x64-windows\debug\lib\pkgconfig"
          
          # 查找 pkg-config 或 pkgconf
          $pkgConfig = Get-Command pkgconf -ErrorAction SilentlyContinue
          if (!$pkgConfig) {
            $pkgConfig = Get-Command pkg-config -ErrorAction SilentlyContinue
          }
          
          if ($pkgConfig) {
            Write-Host "✓ Found: $($pkgConfig.Path)"
            & $pkgConfig.Path --version
            Write-Host "Testing dav1d detection..."
            & $pkgConfig.Path --libs --cflags dav1d
          } else {
            Write-Error "pkg-config/pkgconf not found in PATH!"
            exit 1
          }

      - name: windows bundles
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          npm i pnpm -g
          pnpm i
          node --run build:ui
          node --run build:tauri:win

      - uses: softprops/action-gh-release@v2
        if: matrix.os == 'windows-latest'
        with:
          draft: true
          files: |
            ./target/release/bundle/nsis/*.exe
