name: release

permissions:
  contents: write

on:
  push:
    tags:
      - "[0-9]+.*"

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  release:
    runs-on: ${{ matrix.os }}
    name: release (${{ matrix.os }})

    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || '' }}

      # ============ macOS 构建步骤 ============
      - name: download ffmpeg and ffprobe
        if: matrix.os == 'macos-latest'
        run: |
          mkdir ./tauri/ffmpeg
          curl -L -o ffmpeg.zip "https://evermeet.cx/ffmpeg/getrelease/zip"
          unzip ffmpeg.zip -d ./tauri/ffmpeg
          chmod +x ./tauri/ffmpeg/ffmpeg
          ./tauri/ffmpeg/ffmpeg -version
          curl -L -o ffprobe.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip"
          unzip ffprobe.zip -d ./tauri/ffmpeg
          chmod +x ./tauri/ffmpeg/ffprobe
          ./tauri/ffmpeg/ffprobe -version

      - name: macos bundles
        if: matrix.os == 'macos-latest'
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: |
          npm i pnpm -g
          pnpm i
          node --run build:ui
          node --run build:tauri:ffmpeg
          mkdir ./target/ffmpeg-dmg
          mv ./target/universal-apple-darwin/release/bundle/dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal.dmg ./target/ffmpeg-dmg/CzkawkaTauri_${GITHUB_REF_NAME}_universal_ffmpeg.dmg
          node --run build:tauri

      - uses: softprops/action-gh-release@v2
        if: matrix.os == 'macos-latest'
        with:
          draft: true
          files: |
            ./target/universal-apple-darwin/release/bundle/dmg/*.dmg
            ./target/ffmpeg-dmg/*.dmg

      # ============ Windows 构建步骤（使用预构建的 dav1d） ============
      - name: extract prebuilt dav1d
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $dav1dZip = ".\prebuilt\dav1d-windows-x64.zip"
          $extractPath = "C:\dav1d"
          
          Write-Host "Extracting prebuilt dav1d from repository..."
          
          if (Test-Path $dav1dZip) {
            New-Item -ItemType Directory -Path $extractPath -Force | Out-Null
            Expand-Archive -Path $dav1dZip -DestinationPath $extractPath -Force
            
            Write-Host "Verifying extraction..."
            $dav1dPc = "$extractPath\lib\pkgconfig\dav1d.pc"
            $dav1dDll = "$extractPath\bin\dav1d.dll"
            
            if ((Test-Path $dav1dPc) -and (Test-Path $dav1dDll)) {
              Write-Host "Success: dav1d files extracted"
              Write-Host "  - $dav1dPc"
              Write-Host "  - $dav1dDll"
              Get-Content $dav1dPc | Select-Object -First 5
            } else {
              Write-Error "Failed: dav1d files not found after extraction"
              Get-ChildItem $extractPath -Recurse | Select-Object FullName
              exit 1
            }
          } else {
            Write-Error "Failed: Prebuilt package not found at $dav1dZip"
            exit 1
          }

      - name: install pkgconf
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Installing pkgconf via chocolatey..."
          choco install pkgconfiglite -y
          
          $pkgConfig = Get-Command pkg-config -ErrorAction SilentlyContinue
          if ($pkgConfig) {
            Write-Host "Success: pkg-config installed at $($pkgConfig.Path)"
            & $pkgConfig.Path --version
          } else {
            Write-Error "Failed: pkg-config not found after installation"
            exit 1
          }

      - name: configure build environment
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $dav1dRoot = "C:\dav1d"
          $pkgCfgPath = "$dav1dRoot\lib\pkgconfig"
          $binPath = "$dav1dRoot\bin"
          
          $newPath = "$binPath;$env:PATH"
          echo "PATH=$newPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          echo "PKG_CONFIG_PATH=$pkgCfgPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=1" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          
          Write-Host "Environment configured successfully"
          Write-Host "PKG_CONFIG_PATH: $pkgCfgPath"
          Write-Host "PATH includes: $binPath"

      - name: verify dav1d detection
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          $env:PKG_CONFIG_PATH = "C:\dav1d\lib\pkgconfig"
          $env:PKG_CONFIG_ALLOW_SYSTEM_CFLAGS = "1"
          
          Write-Host "Testing dav1d detection with pkg-config..."
          pkg-config --modversion dav1d
          pkg-config --libs --cflags dav1d
          
          if ($LASTEXITCODE -eq 0) {
            Write-Host "Success: dav1d detected correctly"
          } else {
            Write-Error "Failed: Could not detect dav1d"
            Write-Host "PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
            Get-ChildItem "C:\dav1d\lib\pkgconfig" -ErrorAction SilentlyContinue
            exit 1
          }

      - name: windows bundles
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          npm i pnpm -g
          pnpm i
          node --run build:ui
          node --run build:tauri:win

      - uses: softprops/action-gh-release@v2
        if: matrix.os == 'windows-latest'
        with:
          draft: true
          files: |
            ./target/release/bundle/nsis/*.exe
